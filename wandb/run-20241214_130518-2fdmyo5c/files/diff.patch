diff --git a/test.ipynb b/test.ipynb
index 0bc86473..952b6f12 100644
--- a/test.ipynb
+++ b/test.ipynb
@@ -2,45 +2,595 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 86,
    "metadata": {},
    "outputs": [],
    "source": [
     "from datasets import load_dataset\n",
-    "data = load_dataset(\"Sing0402/fever_200\")[\"train\"]"
+    "\n",
+    "data = load_dataset(\"Sing0402/ambignq_200\")['train']"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 92,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "200"
+      ]
+     },
+     "execution_count": 92,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "all_q = []\n",
+    "for i in data['train']:\n",
+    "    question = i[\"question\"]\n",
+    "    all_q.append(question)\n",
+    "\n",
+    "len(all_q)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 94,
    "metadata": {},
    "outputs": [],
    "source": [
-    "for idx, instance in enumerate(data):\n",
+    "comp_data = load_dataset(\"alckasoc/ambignq_500\")['validation']"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 96,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "500"
+      ]
+     },
+     "execution_count": 96,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "comp_q =[]\n",
+    "for i in comp_data:\n",
+    "    question = i['question']\n",
+    "    comp_q.append(question)\n",
     "\n",
+    "len(comp_q)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 98,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "i = 0\n",
+    "indices = []  # List to store the indices\n",
+    "answerofsort = []\n",
+    "seen_questions = set()  # Use a set for faster lookup\n",
     "\n",
+    "for instance in comp_data:\n",
     "    question = instance[\"question\"]\n",
-    "    answer = instance[\"answer\"]"
+    "    \n",
+    "    # Check if the question is in total_question and hasn't been seen before\n",
+    "    if question in all_q and question not in seen_questions:\n",
+    "        i += 1\n",
+    "        # Mark question as seen\n",
+    "        seen_questions.add(question)\n",
+    "        \n",
+    "        # Find the index of the question in total_question\n",
+    "        index = all_q.index(question)\n",
+    "        indices.append(index)\n",
+    "        answerofsort.append(instance['annotations'])\n",
+    "\n",
+    "# Indices list now contains the ordered indices\n",
+    "indices.sort()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 103,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "'What part of an ar 15 has the serial number?'"
+       "195"
       ]
      },
-     "execution_count": 21,
+     "execution_count": 103,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "question"
+    "len(indices)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 104,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[166, 172, 185, 193, 196]\n"
+     ]
+    }
+   ],
+   "source": [
+    "# Given: `indices` is a sorted list of numbers\n",
+    "indices = sorted(indices)  # Ensure indices are sorted\n",
+    "\n",
+    "# Find missing numbers in the range 0 to 200\n",
+    "missing_numbers = [num for num in range(200) if num not in indices]\n",
+    "\n",
+    "# Print the missing numbers\n",
+    "print(missing_numbers)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 102,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(195, 200)"
+      ]
+     },
+     "execution_count": 102,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "len(answerofsort), len(all_q)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 58,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "([36, 180, 190],\n",
+       " [0,\n",
+       "  1,\n",
+       "  2,\n",
+       "  3,\n",
+       "  4,\n",
+       "  5,\n",
+       "  6,\n",
+       "  7,\n",
+       "  8,\n",
+       "  9,\n",
+       "  10,\n",
+       "  11,\n",
+       "  12,\n",
+       "  13,\n",
+       "  14,\n",
+       "  15,\n",
+       "  16,\n",
+       "  17,\n",
+       "  18,\n",
+       "  19,\n",
+       "  20,\n",
+       "  21,\n",
+       "  22,\n",
+       "  23,\n",
+       "  24,\n",
+       "  25,\n",
+       "  26,\n",
+       "  27,\n",
+       "  28,\n",
+       "  29,\n",
+       "  30,\n",
+       "  31,\n",
+       "  32,\n",
+       "  33,\n",
+       "  34,\n",
+       "  35,\n",
+       "  37,\n",
+       "  38,\n",
+       "  39,\n",
+       "  40,\n",
+       "  41,\n",
+       "  42,\n",
+       "  43,\n",
+       "  44,\n",
+       "  45,\n",
+       "  46,\n",
+       "  47,\n",
+       "  48,\n",
+       "  49,\n",
+       "  50,\n",
+       "  51,\n",
+       "  52,\n",
+       "  53,\n",
+       "  54,\n",
+       "  55,\n",
+       "  56,\n",
+       "  57,\n",
+       "  58,\n",
+       "  59,\n",
+       "  60,\n",
+       "  61,\n",
+       "  62,\n",
+       "  63,\n",
+       "  64,\n",
+       "  65,\n",
+       "  66,\n",
+       "  67,\n",
+       "  68,\n",
+       "  69,\n",
+       "  70,\n",
+       "  71,\n",
+       "  72,\n",
+       "  73,\n",
+       "  74,\n",
+       "  75,\n",
+       "  76,\n",
+       "  77,\n",
+       "  78,\n",
+       "  79,\n",
+       "  80,\n",
+       "  81,\n",
+       "  82,\n",
+       "  83,\n",
+       "  84,\n",
+       "  85,\n",
+       "  86,\n",
+       "  87,\n",
+       "  88,\n",
+       "  89,\n",
+       "  90,\n",
+       "  91,\n",
+       "  92,\n",
+       "  93,\n",
+       "  94,\n",
+       "  95,\n",
+       "  96,\n",
+       "  97,\n",
+       "  98,\n",
+       "  99,\n",
+       "  100,\n",
+       "  101,\n",
+       "  102,\n",
+       "  103,\n",
+       "  104,\n",
+       "  105,\n",
+       "  106,\n",
+       "  107,\n",
+       "  108,\n",
+       "  109,\n",
+       "  110,\n",
+       "  111,\n",
+       "  112,\n",
+       "  113,\n",
+       "  114,\n",
+       "  115,\n",
+       "  116,\n",
+       "  117,\n",
+       "  118,\n",
+       "  119,\n",
+       "  120,\n",
+       "  121,\n",
+       "  122,\n",
+       "  123,\n",
+       "  124,\n",
+       "  125,\n",
+       "  126,\n",
+       "  127,\n",
+       "  128,\n",
+       "  129,\n",
+       "  130,\n",
+       "  131,\n",
+       "  132,\n",
+       "  133,\n",
+       "  134,\n",
+       "  135,\n",
+       "  136,\n",
+       "  137,\n",
+       "  138,\n",
+       "  139,\n",
+       "  140,\n",
+       "  141,\n",
+       "  142,\n",
+       "  143,\n",
+       "  144,\n",
+       "  145,\n",
+       "  146,\n",
+       "  147,\n",
+       "  148,\n",
+       "  149,\n",
+       "  150,\n",
+       "  151,\n",
+       "  152,\n",
+       "  153,\n",
+       "  154,\n",
+       "  155,\n",
+       "  156,\n",
+       "  157,\n",
+       "  158,\n",
+       "  159,\n",
+       "  160,\n",
+       "  161,\n",
+       "  162,\n",
+       "  163,\n",
+       "  164,\n",
+       "  165,\n",
+       "  166,\n",
+       "  167,\n",
+       "  168,\n",
+       "  169,\n",
+       "  170,\n",
+       "  171,\n",
+       "  172,\n",
+       "  173,\n",
+       "  174,\n",
+       "  175,\n",
+       "  176,\n",
+       "  177,\n",
+       "  178,\n",
+       "  179,\n",
+       "  181,\n",
+       "  182,\n",
+       "  183,\n",
+       "  184,\n",
+       "  185,\n",
+       "  186,\n",
+       "  187,\n",
+       "  188,\n",
+       "  189,\n",
+       "  191,\n",
+       "  192,\n",
+       "  193,\n",
+       "  194,\n",
+       "  195,\n",
+       "  196,\n",
+       "  197,\n",
+       "  198,\n",
+       "  199])"
+      ]
+     },
+     "execution_count": 58,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "missing_numbers, indices"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 106,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "What percentage of the world died in ww2?\n",
+      "Who did houston play in 2005 world series?\n",
+      "When did michael record dont matter to me?\n",
+      "When is ap men's basketball poll released?\n",
+      "What is it called when you dont like to hear someone chew?\n"
+     ]
+    }
+   ],
+   "source": [
+    "for i in missing_numbers:\n",
+    "    print(all_q[i])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 107,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "200\n"
+     ]
+    }
+   ],
+   "source": [
+    "# Combine indices and missing_numbers and sort them to determine the final order\n",
+    "all_indices = indices + missing_numbers\n",
+    "all_indices.sort()\n",
+    "\n",
+    "# Create a new sorted answer list\n",
+    "sorted_answerofsort = []\n",
+    "current_answer_index = 0  # Pointer for answerofsort\n",
+    "for idx in all_indices:\n",
+    "    if idx in indices:\n",
+    "        # Add the corresponding answer when the index exists in indices\n",
+    "        sorted_answerofsort.append(answerofsort[current_answer_index])\n",
+    "        current_answer_index += 1\n",
+    "    else:\n",
+    "        # Add an empty dictionary if the index is in missing_numbers\n",
+    "        sorted_answerofsort.append({})\n",
+    "        i += 1\n",
+    "\n",
+    "# Now `sorted_answerofsort` contains the answers interspersed with `{}` for missing numbers\n",
+    "print(len(sorted_answerofsort))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 69,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "200\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(len(sorted_answerofsort))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 124,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "index = sorted_answerofsort.index({})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 125,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "196"
+      ]
+     },
+     "execution_count": 125,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "index"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 114,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sorted_answerofsort[166] =  [{ \"answer\": [ \"3%\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" }, { \"answer\": [ \"3\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" } ]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 115,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sorted_answerofsort[172] = [ { \"answer\": [ \"White Sox\", \"Chicago White Sox\", \"Chicago\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" }, { \"answer\": [ \"Chicago White Sox\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" } ]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 119,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sorted_answerofsort[185] =[ { \"answer\": [ \"1983\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" }, { \"answer\": None, \"qaPairs\": [ { \"answer\": [ \"1983\" ], \"question\": \"When was the original demo of \\\"Dont Matter to Me\\\" recorded by Micheal Jackson?\" }, { \"answer\": [ \"2018\" ], \"question\": \"When was the Drake and Micheal Jackson version of \\\"Don't Matter to Me\\\" recorded?\" } ], \"type\": \"multipleQAs\" } ]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 123,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sorted_answerofsort[193] = [ { \"answer\": [ \"every Monday\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" } ]\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 126,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sorted_answerofsort[196] = [ { \"answer\": [ \"sound-rage\", \"Selective Sound Sensitivity syndrome\", \"Misophonia\", \"Select sound sensitivity syndrome\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" }, { \"answer\": [ \"Misophonia\" ], \"qaPairs\": None, \"type\": \"singleAnswer\" } ]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 82,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(200, 200)"
+      ]
+     },
+     "execution_count": 82,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "len(sorted_answerofsort) , len(total_question)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 127,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "result = {'question' : all_q , 'annotations':sorted_answerofsort}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 128,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Creating parquet from Arrow format: 100%|██████████| 1/1 [00:00<00:00, 165.43ba/s]\n",
+      "Uploading the dataset shards: 100%|██████████| 1/1 [00:01<00:00,  1.37s/it]\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "CommitInfo(commit_url='https://huggingface.co/datasets/Sing0402/ambignq_200/commit/d667b67cf0ca3d6cfb72cb8e1cdef3b7e494e691', commit_message='Upload dataset', commit_description='', oid='d667b67cf0ca3d6cfb72cb8e1cdef3b7e494e691', pr_url=None, pr_revision=None, pr_num=None)"
+      ]
+     },
+     "execution_count": 128,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "from datasets import Dataset\n",
+    "\n",
+    "dataset = Dataset.from_dict(result)\n",
+    "dataset.push_to_hub(\"Sing0402/ambignq_200\")"
    ]
   },
   {

"""CRITIC Agent.

Original Paper: https://arxiv.org/pdf/2305.11738
Paper Repository: https://github.com/microsoft/ProphetNet/tree/master/CRITIC
"""

from typing import Any, Dict, List

from langchain_core.language_models.chat_models import BaseChatModel

from pydantic import BaseModel, Field

from agential.cog.agent.base import BaseAgent
from agential.cog.strategies.strategy_factory import CriticStrategyFactory

class CriticPydanticOutput(BaseModel):
    class Config:
        title = 'Critic Output'
        description = 'Critic output for different modes'

    class QA(BaseModel):
        answer: str = Field(..., description="The answer generated by the agent.")
        critique: str = Field(..., description="The critique of the answer generated by the agent.")
        query: str = Field(..., description="The query requested by the agent.")
        search_result: str = Field(..., description="The search result requested by the agent.")
        revised_answer: str = Field(..., description="The revised answer generated by the agent.")

    class Math(BaseModel):
        code: str = Field(..., description="The code generated by the agent.")
        critique: str = Field(..., description="The critique of the code generated by the agent.")
        execution_status: str = Field(..., description="The execution status of the agent.")
        code_answer: str = Field(..., description="The code answer generated by the agent.")
        improved_code: str = Field(..., description="The improved code generated by the agent.")

    class Code(BaseModel):
        code: str = Field(..., description="The code generated by the agent.")
        critique: str = Field(..., description="The critique of the code generated by the agent.")
        execution_status: str = Field(..., description="The execution status of the agent.")
        improved_code: str = Field(..., description="The improved code generated by the agent.")


        #answer: str = Field(..., description = "The answer generated by the agent.")
        #critique : str = Field(..., description = "The critique of the answer generated by the agent.")
        #query: str = Field(..., description = "The query requested by the agent. ")
        #search_result: str = Field(..., description = "The search result requested by the agent.")
        #revised_answer: str = Field(..., description = "The revised answer generated by the agent. ")

        #code: int/str? = Field(..., description = "The code generated by the agent.")
        #critique: str = Field(..., description = " The critique of the answer generated by the agent.")

        #execution_status: str = Field(..., description = "The execution status of the agent.")
        #code_answer: int/str? = Field(..., description = "The code answer generated by the agent.")
        #improved_code: int/str? = Field(..., description = "The improved code generated by the agent.")





class CriticAgent(BaseAgent):
    """CRITIC Agent.
    Attributes:
        llm (BaseChatModel): An instance of a language model used for generating initial answers
            and critiques.
        mode (Dict[str, str]): A dictionary specifying the CRITIC agent's mode and the benchmark.
            For example, {"qa": "hotpotqa"}, {"math": "gsm8k"}, or {"code": "mbpp"}.
        **strategy_kwargs (Dict[str, Any]): Additional strategy-specific arguments.
    """
    def __init__(
        self,
        llm: BaseChatModel,
        mode: Dict[str, str],
        **strategy_kwargs: Dict[str, Any],
    ) -> None:
        """Initialization."""
        super().__init__()
        self.llm = llm
        self.mode = mode
        self.strategy = CriticStrategyFactory().get_strategy(
            mode=self.mode, llm=self.llm, **strategy_kwargs
        )
    def generate(
        self,
        question: str,
        examples: str,
        prompt: str,
        critique_examples: str,
        critique_prompt: str,
        additional_keys: Dict[str, str] = {},
        critique_additional_keys: Dict[str, str] = {},
        max_interactions: int = 7,
        use_tool: bool = True,
        reset: bool = True,
        **kwargs: Dict[str, Any],
    ) -> List[Dict[str, Any]]:
        """Generates an answer that is refined with search results."""

        out = []
        # Initial answer generation.
        answer = self.strategy.generate(question, examples, prompt, additional_keys)
        critique = ""
        for idx in range(max_interactions):
            critique, external_tool_info = self.strategy.generate_critique(
                idx=idx,
                question=question,
                examples=critique_examples,
                answer=answer,
                critique=critique,
                prompt=critique_prompt,
                additional_keys=critique_additional_keys,
                use_tool=use_tool,
                max_interactions=max_interactions,
                **kwargs,
            )

            if self.mode["qa"]:
                output = CriticPydanticOutput.QA(
                    answer=answer,
                    critique=critique,
                    query=external_tool_info.get("query", ""),
                    search_result=external_tool_info.get("search_result", ""),
                    revised_answer=self.strategy.update_answer_based_on_critique(
                        question=question,
                        examples=critique_examples,
                        answer=answer,
                        critique=critique,
                        prompt=critique_prompt,
                        additional_keys=critique_additional_keys,
                        external_tool_info=external_tool_info,
                        **kwargs,
                    ),
                )
            elif self.mode["math"]:
                output = CriticPydanticOutput.Math(
                    code=answer,
                    critique=critique,
                    execution_status=external_tool_info.get("execution_status", ""),
                    code_answer=external_tool_info.get("code_answer", ""),
                    improved_code=self.strategy.update_answer_based_on_critique(
                        question=question,
                        examples=critique_examples,
                        answer=answer,
                        critique=critique,
                        prompt=critique_prompt,
                        additional_keys=critique_additional_keys,
                        external_tool_info=external_tool_info,
                        **kwargs,
                    ),
                )
                
            elif self.mode["code"]:
                output = CriticPydanticOutput.Code(
                    code=answer,
                    critique=critique,
                    execution_status=external_tool_info.get("execution_status", ""),
                    improved_code=self.strategy.update_answer_based_on_critique(
                        question=question,
                        examples=critique_examples,
                        answer=answer,
                        critique=critique,
                        prompt=critique_prompt,
                        additional_keys=critique_additional_keys,
                        external_tool_info=external_tool_info,
                        **kwargs,
                    ),
                )

            out.append(output.dict())


            if self.strategy.halting_condition():
                break
            )

            answer = output.revised_answer if self.mode["qa"] else output.improved_code

        return out

    def reset(self) -> None:
        """Resets the CRITIC Agent's internal state."""
        self.strategy.reset()

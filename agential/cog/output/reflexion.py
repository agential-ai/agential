"""Reflexion structured output module."""

from typing import Any, Dict, List

from pydantic import BaseModel, Field


class ReflexionCoTOutput(BaseModel):
    """ReflexionCoT Pydantic output class.

    Attributes:
        thought (str): The thought process of the agent.
        action_type (str): The type of action performed by the agent.
        observation (str): The observation made by the agent.
        answer (str): The answer generated by the agent.
        is_correct (bool): Indicates if the action was correct.
        reflections (str): Additional reflections on the action.
    """

    thought: str = Field(..., description="The thought process of the agent.")
    action_type: str = Field(
        ..., description="The type of action performed by the agent."
    )
    observation: str = Field(..., description="The observation made by the agent.")
    answer: str = Field(..., description="The answer generated by the agent.")
    is_correct: bool = Field(..., description="Indicates if the action was correct.")
    reflections: List[str] = Field(
        ..., description="Additional reflections on the action."
    )


class ReflexionReActStepOutput(BaseModel):
    """ReflexionReAct Step Pydantic output class.

    Attributes:
        thought (str): The thought process of the agent.
        action_type (str): The type of action performed by the agent.
        query (str): The query requested by the agent.
        observation (str): The observation made by the agent.
        answer (str): The answer generated by the agent.
        external_tool_info (Dict[str, Any]): The external tool outputs.
        is_correct (bool): Indicates if the action was correct.
    """

    thought: str = Field(..., description="The thought process of the agent.")
    action_type: str = Field(
        ..., description="The type of action performed by the agent."
    )
    query: str = Field(..., description="The query requested by the agent.")
    observation: str = Field(..., description="The observation made by the agent.")
    answer: str = Field(..., description="The answer generated by the agent.")
    external_tool_info: Dict[str, Any] = Field(
        ..., description="The external tool outputs."
    )
    is_correct: bool = Field(..., description="Indicates if the action was correct.")


class ReflexionReActOutput(BaseModel):
    """ReflexionReAct Pydantic output class.

    Attributes:
        react_output (List[ReflexionReActStepOutput]): The output of each step of the ReflexionReAct agent.
        reflections (List[str]): The reflections generated by the ReflexionReAct agent.
    """

    react_output: List[ReflexionReActStepOutput] = Field(
        ..., description="The output of each step of the ReflexionReAct agent."
    )
    reflections: List[str] = Field(
        ..., description="The reflections generated by the ReflexionReAct agent."
    )
